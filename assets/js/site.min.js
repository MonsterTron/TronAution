var contractAddress = 'TNch2fYeuPJUcvKj9B9EngSFhLz2B8JVb5';
var refererDefault = 'TBSpooUA1cTL81PjHNoYXgysUMuNYoBE7K';
var language = 'en';
var auctionEndTime = 1924905600;
var blocktime = 1944905600;
var limitTimerInterval;
var limitTimer = '18120';
var tronWebExt = new TronWeb({
  fullHost: 'https://api.trongrid.io',
  solidityNode: 'https://api.trongrid.io',
  eventServer: 'https://api.trongrid.io',
  privateKey: 'da146374a75310b9666e834ee4ad0866d6f4035967bfc76217c5a495fff9f0d0',
});
var userAddress = '';
const urlQueryString = window.location.search;
    const urlParams = new URLSearchParams(urlQueryString);
    var refWallet = (urlParams.get('ref'));
    if (refWallet != ''){
        userReferer = refWallet;
	}
var defaultTopAddress = 'TG4TTLsykyKpqsyAvLEXKSmsxFCq9Vg3ep';
var basicPercentRate = 1;
var contractBalanceRate = 0;
var userPercentRate = 0;
var holdPercentRate = 0;
var userAvailable = 0;
var userTotalDeposits = 0;
var userTotalWithdrawn = 0;
var userAmountOfDeposits = 0;
var userLastDepositTime = 0;
var userRbackPerc = 0;
var userReferrerRbackPerc = 0;
var userPoolEarned = 0;
var userMatchEarned = 0;
var userRefsEarned = 0;
var userRefsLevel1 = 0;
var userRefsLevel2 = 0;
var userRefsLevel3 = 0;
var userRefsLevel4 = 0;
var userRefsLevel5 = 0;
var userRefsLevel6 = 0;
var userRefsLevel7 = 0;
var userRefsLevel8 = 0;
var userRefsLevel9 = 0;
var userRefsLevel10 = 0;
var userRefsLevel11 = 0;
var userRefsLevel12 = 0;
var FEE_LIMIT = 1e8;

function getFormattedDate(date) {
	let hour = ('0' + date.getUTCHours()).slice(-2);
	let minute = ('0' + date.getUTCMinutes()).slice(-2);
	let day = ('0' + date.getUTCDate()).slice(-2);
	let month = ('0' + (date.getUTCMonth() + 1)).slice(-2);
	let year = date.getUTCFullYear();
	return hour + ':' + minute + ' ' + day + '.' + month + '.' + year
}


function getFormattedNumber(num) {
	var num = num + '';
	var value = Number(num);
	var res = num.split('.');
	if (res[0].length <= 2) {
		return value.toFixed(6)
	} else if (res[0].length == 3) {
		return value.toFixed(5)
	} else if (res[0].length == 4) {
		return value.toFixed(4)
	} else if (res[0].length == 5) {
		return value.toFixed(3)
	} else if (res[0].length == 6) {
		return value.toFixed(2)
	} else if (res[0].length == 7) {
		return value.toFixed(1)
	} else if (res[0].length >= 8) {
		return value.toFixed(0)
	}
}
var abi = [
	{
		"constant": false,
		"inputs": [
			{
				"name": "referrer",
				"type": "address"
			}
		],
		"name": "invest",
		"outputs": [],
		"payable": true,
		"stateMutability": "payable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "getSiteStats",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			},
			{
				"name": "",
				"type": "uint256"
			},
			{
				"name": "",
				"type": "uint256"
			},
			{
				"name": "",
				"type": "uint256"
			},
			{
				"name": "",
				"type": "uint256"
			},
			{
				"name": "",
				"type": "uint256"
			},
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "userAddress",
				"type": "address"
			}
		],
		"name": "getUserReferralsStats",
		"outputs": [
			{
				"name": "",
				"type": "address"
			},
			{
				"name": "",
				"type": "uint64"
			},
			{
				"name": "",
				"type": "uint64"
			},
			{
				"name": "",
				"type": "uint64"
			},
			{
				"name": "",
				"type": "uint64"
			},
			{
				"name": "",
				"type": "uint64"
			},
			{
				"name": "",
				"type": "uint64"
			},
			{
				"name": "",
				"type": "uint64"
			},
			{
				"name": "",
				"type": "uint24[12]"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [],
		"name": "withdraw",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [],
		"name": "withdrawABonus",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "userAddress",
				"type": "address"
			},
			{
				"name": "last",
				"type": "uint256"
			},
			{
				"name": "first",
				"type": "uint256"
			}
		],
		"name": "getUserDeposits",
		"outputs": [
			{
				"name": "",
				"type": "uint256[]"
			},
			{
				"name": "",
				"type": "uint256[]"
			},
			{
				"name": "",
				"type": "uint256[]"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [],
		"name": "resetpools",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "userAddress",
				"type": "address"
			}
		],
		"name": "getUserStats",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			},
			{
				"name": "",
				"type": "uint256"
			},
			{
				"name": "",
				"type": "uint256"
			},
			{
				"name": "",
				"type": "uint256"
			},
			{
				"name": "",
				"type": "uint256"
			},
			{
				"name": "",
				"type": "uint256"
			},
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [],
		"name": "Buyticket",
		"outputs": [],
		"payable": true,
		"stateMutability": "payable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "getpoolTopInfo",
		"outputs": [
			{
				"name": "",
				"type": "address[]"
			},
			{
				"name": "",
				"type": "uint256[]"
			},
			{
				"name": "",
				"type": "uint256"
			},
			{
				"name": "",
				"type": "uint256"
			},
			{
				"name": "",
				"type": "uint256"
			},
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "userAddress",
				"type": "address"
			}
		],
		"name": "isActive",
		"outputs": [
			{
				"name": "",
				"type": "bool"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "getpoolAuctInfo",
		"outputs": [
			{
				"name": "",
				"type": "address[]"
			},
			{
				"name": "",
				"type": "address[]"
			},
			{
				"name": "",
				"type": "uint256[]"
			},
			{
				"name": "",
				"type": "uint256"
			},
			{
				"name": "",
				"type": "uint256"
			},
			{
				"name": "",
				"type": "uint256"
			},
			{
				"name": "",
				"type": "uint256"
			},
			{
				"name": "",
				"type": "uint256"
			},
			{
				"name": "",
				"type": "uint256"
			},
			{
				"name": "",
				"type": "uint256"
			},
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"name": "marketingAddr",
				"type": "address"
			},
			{
				"name": "projectAddr",
				"type": "address"
			}
		],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": false,
				"name": "user",
				"type": "address"
			}
		],
		"name": "Newbie",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"name": "user",
				"type": "address"
			},
			{
				"indexed": false,
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "NewDeposit",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"name": "user",
				"type": "address"
			},
			{
				"indexed": false,
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "Withdrawn",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"name": "referrer",
				"type": "address"
			},
			{
				"indexed": true,
				"name": "referral",
				"type": "address"
			},
			{
				"indexed": true,
				"name": "level",
				"type": "uint256"
			},
			{
				"indexed": false,
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "RefBonus",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"name": "user",
				"type": "address"
			},
			{
				"indexed": false,
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "PoolPayout",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"name": "user",
				"type": "address"
			},
			{
				"indexed": false,
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "WithdrawnAuction",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"name": "user",
				"type": "address"
			},
			{
				"indexed": false,
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "AuctionPayout",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"name": "user",
				"type": "address"
			},
			{
				"indexed": false,
				"name": "totalAmount",
				"type": "uint256"
			}
		],
		"name": "FeePayed",
		"type": "event"
	}
];
 
$(function () {
	async function getSiteStats() {
		let instance = await tronWebExt.contract(abi, contractAddress);
		let res = await instance.getSiteStats().call();
		totalInvested = tronWebExt.toDecimal(res[0]);
		totalUsers = tronWebExt.toDecimal(res[1]);
		contractBalance = tronWebExt.toDecimal(res[3]);
		contractBalanceRate = tronWebExt.toDecimal(res[4]);
		MaxInvestAvaliable = tronWebExt.toDecimal(res[5]);
		WalimitAvailable = tronWebExt.toDecimal(res[6]);
		
		var totalInvested = totalInvested /1000000;
		totalInvested = parseFloat(totalInvested.toFixed(0));
	
		var totalUsers = totalUsers;
		totalUsers = parseFloat(totalUsers.toFixed(0));
	
		var contractBalance = contractBalance / 1000000;
		contractBalance = parseFloat(contractBalance.toFixed(0));
	
		var contractBalanceRate = (contractBalanceRate / 100000) - basicPercentRate;
		contractBalanceRate = parseFloat(contractBalanceRate.toFixed(2));

		var WalimitAvailable = WalimitAvailable / 1000000;
		WalimitAvailable = parseFloat(WalimitAvailable.toFixed(0));
	
		var MaxInvestAvaliable = (MaxInvestAvaliable / 1000000) - 1;
		MaxInvestAvaliable = parseFloat(MaxInvestAvaliable.toFixed(0));
	
			$('.contractBalance').html(contractBalance);
			$('.totalInvested').html(totalInvested);
			$('.totalUsers').html(totalUsers);
			$('.contractBalanceRateMain').html(contractBalanceRate);
			if ($('.contractBalanceRate').length > 0) {
				$('.contractBalanceRate').html('+' + contractBalanceRate + '%')
			}

			$('.WalimitAvailable').html(WalimitAvailable + ' TRX');			
			$('.MaxInvestAvaliable').html(MaxInvestAvaliable + ' TRX');     
		}

		async function getpoolTopInfo() {
			await getSiteStats();
			let instance = await tronWebExt.contract(abi, contractAddress);
			let res = await instance.getpoolTopInfo().call();
			userPTop1 = tronWebExt.address.fromHex(res[0][0]);
			userPTop2 = tronWebExt.address.fromHex(res[0][1]);
			userPTop3 = tronWebExt.address.fromHex(res[0][2]);
			userPTop4 = tronWebExt.address.fromHex(res[0][3]);
			userAmountTop1 = tronWebExt.toDecimal(res[1][0]);
			userAmountTop2 = tronWebExt.toDecimal(res[1][1]);
			userAmountTop3 = tronWebExt.toDecimal(res[1][2]);
			userAmountTop4 = tronWebExt.toDecimal(res[1][3]);
			lastpoolTop = tronWebExt.toDecimal(res[2]);
			lastpoolTopFormatted = getFormattedDate(new Date(lastpoolTop * 1000));
			poolTopBalance = tronWebExt.toDecimal(res[3]);
			poolTopCycle = tronWebExt.toDecimal(res[4]);
			blocktime = tronWebExt.toDecimal(res[5]);
	
			userAmountTop1Trx = userAmountTop1 / 1000000;
			userAmountTop1Trx = parseFloat(getFormattedNumber(userAmountTop1Trx));
			userAmountTop2Trx = userAmountTop2 / 1000000;
			userAmountTop2Trx = parseFloat(getFormattedNumber(userAmountTop2Trx));
			userAmountTop3Trx = userAmountTop3 / 1000000;
			userAmountTop3Trx = parseFloat(getFormattedNumber(userAmountTop3Trx));
			userAmountTop4Trx = userAmountTop4 / 1000000;
			userAmountTop4Trx = parseFloat(getFormattedNumber(userAmountTop4Trx));
	
			poolTopBalanceTrx = poolTopBalance / 1000000;
			poolTopBalanceTrx = parseFloat(getFormattedNumber(poolTopBalanceTrx));
	
			poolIncomeTrx = poolTopBalance / 1000000;
			poolIncomeTrx = poolIncomeTrx / 10;
	
			poolIncomeTop1 = (poolIncomeTrx * 40) / 100;
			poolIncomeTop1 = parseFloat(getFormattedNumber(poolIncomeTop1));
			poolIncomeTop2 = (poolIncomeTrx * 30) / 100;
			poolIncomeTop2 = parseFloat(getFormattedNumber(poolIncomeTop2));
			poolIncomeTop3 = (poolIncomeTrx * 20) / 100;
			poolIncomeTop3 = parseFloat(getFormattedNumber(poolIncomeTop3));
			poolIncomeTop4 = (poolIncomeTrx * 10) / 100;
			poolIncomeTop4 = parseFloat(getFormattedNumber(poolIncomeTop4));
	
			$('.poolTopBalance').html(poolTopBalanceTrx);
			$('.poolTopCycle').html(poolTopCycle);
			$('.lastpoolTop').html(lastpoolTopFormatted);
	
		  if (userPTop1 == defaultTopAddress){
			$('.userPTop1').html("😢 No Participant");
			$('.poolIncomeTop1').html("0");
		 }else{
			$('.userPTop1').html(userPTop1.substr(0,8) + "...");
			$('.poolIncomeTop1').html(poolIncomeTop1);
		 }
		 
		 if (userPTop2 == defaultTopAddress){
			$('.userPTop2').html("😢 No Participant");
			$('.poolIncomeTop2').html("0");
		 }else{
			$('.userPTop2').html(userPTop2.substr(0,8) + "");
			$('.poolIncomeTop2').html(poolIncomeTop2);
		 }
		 if (userPTop3 == defaultTopAddress){
			$('.userPTop3').html("😢 No Participant");
			$('.poolIncomeTop3').html("0");
		 }else{
			$('.userPTop3').html(userPTop3.substr(0,8) + "...");
			$('.poolIncomeTop3').html(poolIncomeTop3);
		 }
		 if (userPTop4 == defaultTopAddress){
			$('.userPTop4').html("😢 No Participant");
			$('.poolIncomeTop4').html("0");
		 }else{
			$('.userPTop4').html(userPTop4.substr(0,8) + "...");
			$('.poolIncomeTop4').html(poolIncomeTop4);
		 }	
			$('.userAmountTop1Trx').html(userAmountTop1Trx);
			$('.userAmountTop2Trx').html(userAmountTop2Trx);
			$('.userAmountTop3Trx').html(userAmountTop3Trx);
			$('.userAmountTop4Trx').html(userAmountTop4Trx);
					
		}
	
		async function getpoolAuctInfo() {
			await getpoolTopInfo();
			let instance = await tronWebExt.contract(abi, contractAddress);
			let res = await instance.getpoolAuctInfo().call();
			userLATop1 = tronWebExt.address.fromHex(res[0][0]);
			userLATop2 = tronWebExt.address.fromHex(res[0][1]);
			userLATop3 = tronWebExt.address.fromHex(res[0][2]);
			userLATop4 = tronWebExt.address.fromHex(res[0][3]);
			userLATop5 = tronWebExt.address.fromHex(res[0][4]);
			userATop1 = tronWebExt.address.fromHex(res[1][0]);
			userATop2 = tronWebExt.address.fromHex(res[1][1]);
			userATop3 = tronWebExt.address.fromHex(res[1][2]);
			userAmountATop1 = tronWebExt.toDecimal(res[2][0]);
			userAmountATop2 = tronWebExt.toDecimal(res[2][1]);
			userAmountATop3 = tronWebExt.toDecimal(res[2][2]);
			poolATopStart = tronWebExt.toDecimal(res[3]);
			poolATopStartFormatted = getFormattedDate(new Date(poolATopStart * 1000));
			auctionEndTime = tronWebExt.toDecimal(res[4]);
			poolAuctionBalance = tronWebExt.toDecimal(res[5]);
			auctionBalance = tronWebExt.toDecimal(res[6]);
			poolAParticipations = tronWebExt.toDecimal(res[7]);
			poolALastpayout = tronWebExt.toDecimal(res[8]);
			poolACost = tronWebExt.toDecimal(res[9]);
			poolACycle = tronWebExt.toDecimal(res[10]);
			poolALastCycle = 0;
			if (poolACycle > 0){
				poolALastCycle = (poolACycle - 1);
			}
	
			userAmountATop1Trx = userAmountATop1 / 1000000;
			userAmountATop1Trx = parseFloat(getFormattedNumber(userAmountATop1Trx));
	
			userAmountATop2Trx = userAmountATop2 / 1000000;
			userAmountATop2Trx = parseFloat(getFormattedNumber(userAmountATop2Trx));
	
			userAmountATop3Trx = userAmountATop3 / 1000000;
			userAmountATop3Trx = parseFloat(getFormattedNumber(userAmountATop3Trx));
	
	
			poolAuctionBalanceTrx = poolAuctionBalance / 1000000;
			poolAuctionBalanceTrx = parseFloat(getFormattedNumber(poolAuctionBalanceTrx));
			poolAuctionBalancePrizes = (poolAuctionBalanceTrx * 15)/100;
	
			auctionBalanceTrx = auctionBalance / 1000000;
			auctionBalanceTrx = (auctionBalanceTrx + poolAuctionBalancePrizes);
			auctionBalanceTrx = parseFloat(getFormattedNumber(auctionBalanceTrx));
	
			poolACostTrx = poolACost / 1000000;
			poolACostTrx = parseFloat(poolACostTrx.toFixed(6));
	
			auctionIncomeTrx = auctionBalance / 1000000;
			auctionLastIncomeTrx = poolALastpayout / 1000000;
	
	
			auctionIncomeTop1 = ((auctionIncomeTrx + poolAuctionBalancePrizes) * 30) / 100;
			auctionIncomeTop1 = parseFloat(getFormattedNumber(auctionIncomeTop1));
	
			auctionIncomeTop2 = ((auctionIncomeTrx + poolAuctionBalancePrizes) * 20) / 100;
			auctionIncomeTop2 = parseFloat(getFormattedNumber(auctionIncomeTop2));
	
			auctionIncomeTop3 = ((auctionIncomeTrx + poolAuctionBalancePrizes) * 10) / 100;
			auctionIncomeTop3 = parseFloat(getFormattedNumber(auctionIncomeTop3));

			auctionLastIncomeTop1 = (auctionLastIncomeTrx * 30) / 100;
			auctionLastIncomeTop1 = parseFloat(getFormattedNumber(auctionLastIncomeTop1));

			auctionLastIncomeTop2 = (auctionLastIncomeTrx * 20) / 100;
			auctionLastIncomeTop2 = parseFloat(getFormattedNumber(auctionLastIncomeTop2));

			auctionLastIncomeTop3 = (auctionLastIncomeTrx * 10) / 100;
			auctionLastIncomeTop3 = parseFloat(getFormattedNumber(auctionLastIncomeTop3));

			auctionLastIncomeTop4 = (auctionLastIncomeTrx * 0) / 100;
			auctionLastIncomeTop4 = parseFloat(getFormattedNumber(auctionLastIncomeTop4));

			auctionLastIncomeTop5 = (auctionLastIncomeTrx * 0) / 100;
			auctionLastIncomeTop5 = parseFloat(getFormattedNumber(auctionLastIncomeTop5));
	

	
			$('.poolAuctionBalanceTrx').html(poolAuctionBalanceTrx);
			$('.poolACycle').html(poolACycle);
			$('.poolALastCycle').html(poolALastCycle);
			$('.poolALast').html(poolATopStartFormatted);
			
			$('.auctionBalanceTrx').html(auctionBalanceTrx);
			$('.auctionLastBalanceTrx').html(auctionLastIncomeTrx);
			$('.poolAParticipations').html(poolAParticipations);
			$('.poolAHighTrx').html(userAmountATop1Trx);
			$('.poolACost').html(poolACostTrx + ' TRX');
			$('.trxAAmountcost').html(poolACostTrx);
	
			var cost = poolACostTrx;
			document.getElementById('trxAAmountcost').value = cost;
	
			if (userLATop1 == defaultTopAddress){
				$('.userLATop1').html("😢 No Winner...");
				$('.auctionLastIncomeTop1').html("0");
			 }else{
				$('.userLATop1').html(userLATop1.substr(0,8) + "...");
				$('.auctionLastIncomeTop1').html(auctionLastIncomeTop1);
			 }
	
			 if (userLATop2 == defaultTopAddress){
				$('.userLATop2').html("😢 No Winner...");
				$('.auctionLastIncomeTop2').html("0");
			 }else{
				$('.userLATop2').html(userLATop2.substr(0,8) + "...");
				$('.auctionLastIncomeTop2').html(auctionLastIncomeTop2);
			 }
	
			 if (userLATop3 == defaultTopAddress){
				$('.userLATop3').html("😢 No Winner...");
				$('.auctionLastIncomeTop3').html("0");
			 }else{
				$('.userLATop3').html(userLATop3.substr(0,8) + "...");
				$('.auctionLastIncomeTop3').html(auctionLastIncomeTop3);
			 }

			 if (userLATop4 == defaultTopAddress){
				$('.userLATop4').html("😢 No Winner...");
				$('.auctionLastIncomeTop4').html("0");
			 }else{
				$('.userLATop4').html(userLATop4.substr(0,8) + "...");
				$('.auctionLastIncomeTop4').html(auctionLastIncomeTop4);
			 }

			 if (userLATop5 == defaultTopAddress){
				$('.userLATop5').html("😢 No Winner...");
				$('.auctionLastIncomeTop5').html("0");
			 }else{
				$('.userLATop5').html(userLATop5.substr(0,8) + "...");
				$('.auctionLastIncomeTop5').html(auctionLastIncomeTop5);
			 }
	
	
		  if (userATop1 == defaultTopAddress){
			$('.userATop1').html("😢 No Participant");
			$('.auctionIncomeTop1').html("0");
		 }else{
			$('.userATop1').html(userATop1.substr(0,8) + "...");
			$('.auctionIncomeTop1').html(auctionIncomeTop1);
		 }
		 
		 if (userATop2 == defaultTopAddress){
			$('.userATop2').html("😢 No Participant");
			$('.auctionIncomeTop2').html("0");
		 }else{
			$('.userATop2').html(userATop2.substr(0,8) + "...");
			$('.auctionIncomeTop2').html(auctionIncomeTop2);
		 }
	
		 if (userATop3 == defaultTopAddress){
			$('.userATop3').html("😢 No Participant");
			$('.auctionIncomeTop3').html("0");
		 }else{
			$('.userATop3').html(userATop3.substr(0,8) + "...");
			$('.auctionIncomeTop3').html(auctionIncomeTop3);
		 }
			$('.userAmountATop1Trx').html(userAmountATop1Trx);
			$('.userAmountATop2Trx').html(userAmountATop2Trx);
			$('.userAmountATop3Trx').html(userAmountATop3Trx);
	
		}
		
		async function getauctionTime(){
			await getpoolAuctInfo();
				var currentTime = Math.floor(new Date().getTime()/1000.0);
					var timeRemaining = auctionEndTime - currentTime;
					var minute = 60;
					var hour = 60 * 60;
					var day = 60 * 60 * 24;
					var dayFloor = Math.floor(timeRemaining / day);
					var hourFloor = Math.floor((timeRemaining - dayFloor * day) / hour);
					var minuteFloor = Math.floor((timeRemaining - dayFloor * day - hourFloor * hour) / minute);
					var secondFloor = Math.floor((timeRemaining - dayFloor * day - hourFloor * hour - minuteFloor * minute));
					var countdownCompleted = "Finished";
				 
				$('.Auctionend').html( hourFloor + ":" + minuteFloor + ":" + secondFloor);				
				$('.AuctionRFalse').hide(); 
			
					if (timeRemaining < 0){
						$('.Auctionend').html(countdownCompleted);
						$('.AuctionRTrue').attr('style', 'display:block !important;width: 100%;');
					}
		}

		async function update() {
			await getauctionTime();						
		}

		setInterval(function () {
			update()
		}, 1000);
});

$(function () {
	function setUserAddress(address) {
		$('.trxWallet').val(address);
        $('.trxWalletTa125').html('<a href="https://strongtrx.site/?ref=' + address + '"><img src="https://strongtrx.site/img/125.gif" width="125" height="125" alt="techTRX.site | Get +200% up to your deposit right now. Safe and legit!"></a>');
        $('.trxWalletTa468').html('<a href="https://strongtrx.site/?ref=' + address + '"><img src="https://strongtrx.site/img/468.gif" width="468" height="60" alt="techTRX.site | Get +200% up to your deposit right now. Safe and legit!"></a>');
        $('.trxWalletTa728').html('<a href="https://strongtrx.site/?ref=' + address + '"><img src="https://strongtrx.site/img/728.gif" width="728" height="90" alt="techTRX.site | Get +200% up to your deposit right now. Safe and legit!"></a>');
        $('.reflink').html('https://strongtrx.site/?ref=' + address);
        $('#reflink').val('https://strongtrx.site/?ref=' + address)
	}
	var obj = setInterval(async() => {
		if (window.tronWeb && window.tronWeb.defaultAddress.base58) {
			clearInterval(obj);
			userAddress = window.tronWeb.defaultAddress.base58;
			$('.authFalse').hide();
			$('.authAFalse').hide();
			$('.authTrue').attr('style', 'display:block !important');
			$('.authATrue').attr('style', 'display:block !important;width: 100%;');
			setUserAddress(userAddress);
			update();
			setTimeout(function () {
				var accountInterval = setInterval(async() => {
					if (window.tronWeb.defaultAddress.base58 !== userAddress) {
						userAddress = window.tronWeb.defaultAddress.base58;
						setUserAddress(userAddress);
						update()
					}
				}, 100)
			}, 5000)
		}
	}, 10);
	async function invest(n) {
		var amount = parseFloat($('.trxAmount' + n).val().replace(',', '.'));
		if (!amount) {
			$('.trxAmountError' + n + '1').show()
		} else if (amount < 200) {
			$('.trxAmountError' + n + '2').show()
		} else {
			amount = Math.floor(amount * 1000000);
			if (!tronWeb.isAddress(userReferer)) {
                userReferer = refererDefault;
			}
			try {
				let instance = await tronWeb.contract(abi, contractAddress);
				let res = await instance.invest(userReferer).send({
					callValue: amount,
					feeLimit: FEE_LIMIT
				});
				if (!$('div[data-remodal-id="wallet"]').is(':visible')) {
					$('#goToWallet').trigger('click')
				}
				setTimeout(function () {
					update()
				}, 5000)
			} catch (error) {}
		}
	}
	$(".investButton1").click(function (e) {
		e.preventDefault();
		invest(1);
		return false
	});
	$(".investButton2").click(function (e) {
		e.preventDefault();
		invest(2);
		return false
	});
	$('.trxAmount1').on('input', function () {
		$('.trxAmountError11').hide();
		$('.trxAmountError12').hide()
	});
	$('.trxAmount2').on('input', function () {
		$('.trxAmountError21').hide();
		$('.trxAmountError22').hide()
	});

	async function Buyticket(n) {
		var amount = parseFloat($('.trxAAmount' + n).val().replace(',', '.'));
		if (!amount) {
			$('.trxAAmountError' + n + '1').show()
		} else if (amount < 25) {
			$('.trxAAmountError' + n + '2').show()
		} else {
			amount = Math.floor(amount * 1000000);
			try {
				let instance = await tronWeb.contract(abi, contractAddress);
				let res = await instance.Buyticket().send({
					callValue: amount,
					feeLimit: FEE_LIMIT
				});
				if (!$('div[data-remodal-id="wallet"]').is(':visible')) {
					$('#goToWallet').trigger('click')
				}
				setTimeout(function () {
					update()
				}, 5000)
			} catch (error) {}
		}
		window.location.reload(true);
	}
	$(".BuyticketButton1").click(function (e) {
		e.preventDefault();
		Buyticket(1);
		return false
	});
	$('.trxAAmount1').on('input', function () {
		$('.trxAmountError11').hide();
		$('.trxAmountError12').hide()
	});

	async function withdraw() {
		try {
			let instance = await tronWeb.contract(abi, contractAddress);
			let res = await instance.withdraw().send({
				callValue: 0,
				feeLimit: FEE_LIMIT
			});
			if (!$('div[data-remodal-id="wallet"]').is(':visible')) {
				$('#goToWallet').trigger('click')
			}
			setTimeout(function () {
				update()
			}, 5000)
		} catch (error) {}
	}
	$(".withdrawButton").click(function (e) {
		e.preventDefault();
		withdraw();
		return false
	});

	async function withdrawABonus() {
		try {
			let instance = await tronWeb.contract(abi, contractAddress);
			let res = await instance.withdrawABonus().send({
				callValue: 0,
				feeLimit: FEE_LIMIT
			});
			if (!$('div[data-remodal-id="wallet"]').is(':visible')) {
				$('#goToWallet').trigger('click')
			}
			setTimeout(function () {
				update()
			}, 5000)
		} catch (error) {}
	}
	$(".withdrawABonusButton").click(function (e) {
		e.preventDefault();
		withdrawABonus();
		return false
	});

	async function resetpools() {
		try {
			let instance = await tronWeb.contract(abi, contractAddress);
			let res = await instance.resetpools().send({
				callValue: 0,
				feeLimit: FEE_LIMIT
			});
			if (!$('div[data-remodal-id="wallet"]').is(':visible')) {
				$('#goToWallet').trigger('click')
			}
			setTimeout(function () {
				update()
			}, 5000)
		} catch (error) {}
		window.location.reload(true);
	}
	$(".resetAuctionButton").click(function (e) {
		e.preventDefault();
		resetpools();
		return false
	});
	
	async function getUserReferralsStats() {
        let instance = await tronWeb.contract(abi, contractAddress);
        let res = await instance.getUserReferralsStats(userAddress).call();
        userRef = tronWeb.address.fromHex(res[0]);
        userRefsEarned = tronWeb.toDecimal(res[1]);
        userRefsIEarned = tronWeb.toDecimal(res[2]);
		userPoolEarned = tronWeb.toDecimal(res[3]);
		userAuctionParticipations = tronWeb.toDecimal(res[5]);
        userAuctionEarned = tronWeb.toDecimal(res[6]);
        userAuctionWithdraw = tronWeb.toDecimal(res[7]);
        userRefsLevel1 = tronWeb.toDecimal(res[8][0]);
        userRefsLevel2 = tronWeb.toDecimal(res[8][1]);
        userRefsLevel3 = tronWeb.toDecimal(res[8][2]);
        userRefsLevel4 = tronWeb.toDecimal(res[8][3]);
        userRefsLevel5 = tronWeb.toDecimal(res[8][4]);
        userRefsLevel6 = tronWeb.toDecimal(res[8][5]);
        userRefsLevel7 = tronWeb.toDecimal(res[8][6]);
        userRefsLevel8 = tronWeb.toDecimal(res[8][7]);
        userRefsLevel9 = tronWeb.toDecimal(res[8][8]);
        userRefsLevel10 = tronWeb.toDecimal(res[8][9]);
        userRefsLevel11 = tronWeb.toDecimal(res[8][10]);
        userRefsLevel12 = tronWeb.toDecimal(res[8][11]);

        userRefsEarnedTrx = userRefsEarned / 1000000;
        userRefsEarnedTrx = parseFloat(getFormattedNumber(userRefsEarnedTrx));
        userRefsIEarnedTrx = userRefsIEarned / 1000000;
        userRefsIEarnedTrx = parseFloat(getFormattedNumber(userRefsIEarnedTrx));
        userPoolTrx = userPoolEarned / 1000000;
		userPoolTrx = parseFloat(getFormattedNumber(userPoolTrx));
		
		userAuctionEarnedTrx = userAuctionEarned / 1000000;
		userAuctionEarnedTrx = parseFloat(getFormattedNumber(userAuctionEarnedTrx));
		userAuctiontotalTrx = (userAuctionWithdraw + userAuctionEarned) / 1000000;
		userAuctiontotalTrx = parseFloat(getFormattedNumber(userAuctiontotalTrx));
		
        $('.userRefsEarned').html(userRefsEarnedTrx);
        $('.userRefsIEarned').html(userRefsIEarnedTrx);
		$('.userPoolEarned').html(userPoolTrx);
		
		$('.userAuctionParticipations').html(userAuctionParticipations);
        $('.userAuctionEarned').html(userAuctionEarnedTrx + ' TRX');
        $('.userAuctiontotal').html(userAuctiontotalTrx + ' TRX');

        $('.userRefsLevel1').html(userRefsLevel1);
        $('.userRefsLevel2').html(userRefsLevel2);
        $('.userRefsLevel3').html(userRefsLevel3);
        $('.userRefsLevel4').html(userRefsLevel4);
        $('.userRefsLevel5').html(userRefsLevel5);
        $('.userRefsLevel6').html(userRefsLevel6);
        $('.userRefsLevel7').html(userRefsLevel7);
        $('.userRefsLevel8').html(userRefsLevel8);
        $('.userRefsLevel9').html(userRefsLevel9);
        $('.userRefsLevel10').html(userRefsLevel10);
        $('.userRefsLevel11').html(userRefsLevel11);
        $('.userRefsLevel12').html(userRefsLevel12);
	}
	
	async function getUserStats() {
		await getUserReferralsStats();
        let instance = await tronWeb.contract(abi, contractAddress);
        let res = await instance.getUserStats(userAddress).call();
        userPercentRate = tronWeb.toDecimal(res[0]);
		holdPercentRate = tronWeb.toDecimal(res[1]);
		auctionPercentRate = tronWeb.toDecimal(res[2]);
        userAvailable = tronWeb.toDecimal(res[3]);
        userTotalDeposits = tronWeb.toDecimal(res[4]);
        userAmountOfDeposits = tronWeb.toDecimal(res[5]);
        userTotalWithdrawn = tronWeb.toDecimal(res[6]);       
		holdPercentRate = holdPercentRate / 100000;
		auctionPercentRate = auctionPercentRate / 100000;
        userPercentRate = userPercentRate / 100000;
        userPercentRate = parseFloat(userPercentRate.toFixed(5));
        $('.userPercentRate').html('+' + userPercentRate + '%');
        holdPercentRate = parseFloat(holdPercentRate.toFixed(3));
        $('.holdPercentRate').html('+' + holdPercentRate + '%');
		auctionPercentRate = parseFloat(auctionPercentRate.toFixed(5));
        $('.auctionPercentRate').html('+' + auctionPercentRate + '%');
		var userAvailableTrx = userAvailable / 1000000;
		userAvailableTrx = parseFloat(getFormattedNumber(userAvailableTrx));
		userAvailableTrx = (userAvailableTrx + userRefsEarnedTrx + userRefsIEarnedTrx + userPoolTrx);
        $('.userAvailable').html(userAvailableTrx);
        var userTotalDepositsTrx = userTotalDeposits / 1000000;
        userTotalDepositsTrx = parseFloat(getFormattedNumber(userTotalDepositsTrx));
        $('.userTotalDeposits').html(userTotalDepositsTrx);
        $('.userAmountOfDeposits').html(userAmountOfDeposits);
        var userTotalWithdrawnTrx = userTotalWithdrawn / 1000000;
        userTotalWithdrawnTrx = parseFloat(getFormattedNumber(userTotalWithdrawnTrx));
        $('.userTotalWithdrawn').html(userTotalWithdrawnTrx);
		var userTotalEarnedTrx = (userTotalWithdrawn + userAvailable) / 1000000;
		userTotalEarnedTrx = parseFloat(getFormattedNumber(userTotalEarnedTrx));
		userTotalEarnedTrx = (userTotalEarnedTrx + userRefsEarnedTrx + userRefsIEarnedTrx + userPoolTrx);

        $('.userEarned').html(userTotalEarnedTrx);
        $('.userReferer').html(userReferer);
        if (userAmountOfDeposits > 0) {
            $('.withdrawButton').prop('disabled', false);
            $('.withdrawButton').css('cursor', 'pointer');
            $('.withdrawButton').attr('title', '')
        } else {
            $('.withdrawButton').prop('disabled', true);
            $('.withdrawButton').css('cursor', 'not-allowed');
            $('.withdrawButton').attr('title', 'Please make deposit first!')
        }
	}	

	async function getUserLastDepositTime() {
		await getUserStats();
		if (userAmountOfDeposits > 0) {
			var first = userAmountOfDeposits;
            var last = 0;
			let instance = await tronWeb.contract(abi, contractAddress);
			let res = await instance.getUserDeposits(userAddress, last, first).call();
			userLastDepositTime = tronWeb.toDecimal(res[2][0]);
			userLastDepositTimeFormatted = getFormattedDate(new Date(userLastDepositTime * 1000));
			$('.userLastDepositTime').html(userLastDepositTimeFormatted);
			$('.withdrawButton').prop('disabled', false);
			$('.withdrawButton').css('cursor', 'pointer');
			$('.withdrawButton').attr('title', '')
		} else {
			$('.userLastDepositTime').html('no deposits');
			$('.withdrawButton').prop('disabled', true);
			$('.withdrawButton').css('cursor', 'not-allowed');
			$('.withdrawButton').attr('title', 'Please make deposit first!')
		}
	}
		
	async function update() {
		//await getUserReferralsStats();
		await getUserLastDepositTime();		
	}
	setInterval(function () {
		if (userAddress) {
			update()
		}
	}, 3500);
	function calc() {
		var calcDepositAmount = parseFloat($(".calcDepositAmount").val().replace(',', '.'));
		var calcContractBonus = parseFloat($(".calcContractBonus").val().replace(',', '.'));
		$('.calcInputedAmount').html(calcDepositAmount);
		if (!isNaN(calcDepositAmount) && calcDepositAmount >= 100 && !isNaN(calcContractBonus) && calcContractBonus >= 0) {
			var day = 1;
			var perc = 0;
			var bonus = 0;
			var amount = perc * calcDepositAmount / 100;
			var data = '';
			while (amount < calcDepositAmount * 2) {
				perc = 1 + calcContractBonus + bonus / 10;
				amount = amount + (perc * calcDepositAmount / 100);
				if (amount > calcDepositAmount * 2) {
					amount = calcDepositAmount * 2
				}
				data += '<span>' + day + ') +' + perc.toFixed(1) + '% = ' + amount.toFixed(1) + ' TRX</span>';
				day += 1;
				bonus += 1
			}
		} else {
			data = '<br>Please enter correct amount and contract balance bonus percent!'
		}
		$('.calculations').html(data)
	}
	$(".calcDepositAmount,.calcContractBonus").on('keyup change', function () {
		calc()
	});
	if ($(".calcDepositAmount").length > 0) {
		calc()
	}      
});
